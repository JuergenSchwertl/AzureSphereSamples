# Force executable to have .out extension for debugging to work
# This is a requirement of Open Folder infrastructure in Visual Studio
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "${PROJECT_NAME}.out")

SET(AZURE_SPHERE_APPROOT_DIR "${CMAKE_BINARY_DIR}/approot${PROJECT_NAME}")

# Commands to create image package
#ADD_CUSTOM_COMMAND(OUTPUT "${AZURE_SPHERE_APPROOT_DIR}/app_manifest.json"
#    COMMAND ${CMAKE_COMMAND} -E make_directory "${AZURE_SPHERE_APPROOT_DIR}"
#    COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_SOURCE_DIR}/app_manifest.json" "${AZURE_SPHERE_APPROOT_DIR}/app_manifest.json"
#    DEPENDS "${CMAKE_SOURCE_DIR}/app_manifest.json" "${CMAKE_BINARY_DIR}/${PROJECT_NAME}.out")

# JSchwert: need to use CMAKE_CURRENT_SOURCE_DIR instead of CMAKE_SOURCE_DIR
ADD_CUSTOM_COMMAND(OUTPUT "${AZURE_SPHERE_APPROOT_DIR}/app_manifest.json"
    COMMAND ${CMAKE_COMMAND} -E make_directory "${AZURE_SPHERE_APPROOT_DIR}"
    COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/app_manifest.json" "${AZURE_SPHERE_APPROOT_DIR}/app_manifest.json"
    DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/app_manifest.json" "${CMAKE_BINARY_DIR}/${PROJECT_NAME}.out")


FOREACH(ADDITIONAL_APPROOT_INCLUDE ${ADDITIONAL_APPROOT_INCLUDES})
    STRING(REPLACE "\\" "/" ADDITIONAL_APPROOT_INCLUDE_FIXED ${ADDITIONAL_APPROOT_INCLUDE})
    STRING(FIND ${ADDITIONAL_APPROOT_INCLUDE_FIXED} "/" ADDITIONAL_APPROOT_INCLUDE_PATH_END REVERSE)
    IF(NOT ${ADDITIONAL_APPROOT_INCLUDE_PATH_END} EQUAL -1)
        STRING(SUBSTRING ${ADDITIONAL_APPROOT_INCLUDE_FIXED} 0 ${ADDITIONAL_APPROOT_INCLUDE_PATH_END} ADDITIONAL_APPROOT_INCLUDE_PATH)
        ADD_CUSTOM_COMMAND(OUTPUT "${AZURE_SPHERE_APPROOT_DIR}/${ADDITIONAL_APPROOT_INCLUDE}"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${AZURE_SPHERE_APPROOT_DIR}/${ADDITIONAL_APPROOT_INCLUDE_PATH}"
            COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/${ADDITIONAL_APPROOT_INCLUDE_FIXED}" "${AZURE_SPHERE_APPROOT_DIR}/${ADDITIONAL_APPROOT_INCLUDE_FIXED}"
            DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${ADDITIONAL_APPROOT_INCLUDE_FIXED}")
    ELSE()
        ADD_CUSTOM_COMMAND(OUTPUT "${AZURE_SPHERE_APPROOT_DIR}/${ADDITIONAL_APPROOT_INCLUDE}"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${AZURE_SPHERE_APPROOT_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/${ADDITIONAL_APPROOT_INCLUDE_FIXED}" "${AZURE_SPHERE_APPROOT_DIR}/${ADDITIONAL_APPROOT_INCLUDE_FIXED}"
            DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${ADDITIONAL_APPROOT_INCLUDE_FIXED}")
    ENDIF()
ENDFOREACH()

# JSchwert: need to use CMAKE_CURRENT_BINARY_DIR instead of CMAKE_BINARY_DIR
ADD_CUSTOM_COMMAND(OUTPUT "${AZURE_SPHERE_APPROOT_DIR}/bin/app"
    COMMAND ${CMAKE_COMMAND} -E make_directory "${AZURE_SPHERE_APPROOT_DIR}/bin"
    COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.out" "${AZURE_SPHERE_APPROOT_DIR}/bin/app"
    COMMAND "${CMAKE_STRIP}" --strip-unneeded "${AZURE_SPHERE_APPROOT_DIR}/bin/app"
    DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.out")

# Arguments for the image-package command
SET(AZURE_SPHERE_PACKAGE_COMMAND_ARG "-v")
LIST(APPEND AZURE_SPHERE_PACKAGE_COMMAND_ARG "-i;\"${AZURE_SPHERE_APPROOT_DIR}\"")
LIST(APPEND AZURE_SPHERE_PACKAGE_COMMAND_ARG "-o;\"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.imagepackage\"")
LIST(APPEND AZURE_SPHERE_PACKAGE_COMMAND_ARG "-s;\"${AZURE_SPHERE_TARGET_API_SET}\"")

IF((NOT ("${AZURE_SPHERE_HW_DEFINITION}" STREQUAL "")) AND (NOT ("${AZURE_SPHERE_HW_DIRECTORY}" STREQUAL "")))
    LIST(APPEND AZURE_SPHERE_PACKAGE_COMMAND_ARG "-h;\"${AZURE_SPHERE_HW_DIRECTORY}/${AZURE_SPHERE_HW_DEFINITION}\"")
ENDIF()

SET(AZURE_SPHERE_PACKAGE_DEPENDS "${AZURE_SPHERE_APPROOT_DIR}/app_manifest.json;${AZURE_SPHERE_APPROOT_DIR}/bin/app")
FOREACH(ADDITIONAL_APPROOT_INCLUDE ${ADDITIONAL_APPROOT_INCLUDES})
    LIST(APPEND AZURE_SPHERE_PACKAGE_DEPENDS "${AZURE_SPHERE_APPROOT_DIR}/${ADDITIONAL_APPROOT_INCLUDE}")
ENDFOREACH()

# Different command on Windows
IF(${CMAKE_HOST_WIN32})
    SET(AZURE_SPHERE_PACKAGE_TOOL_PATH "${AZURE_SPHERE_SDK_PATH}/Tools/azsphere.exe")
ELSE()
    SET(AZURE_SPHERE_PACKAGE_TOOL_PATH "${AZURE_SPHERE_SDK_PATH}/Tools/azsphere")
ENDIF()

ADD_CUSTOM_COMMAND(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.imagepackage"
    COMMAND "${AZURE_SPHERE_PACKAGE_TOOL_PATH}" image-package pack-application "${AZURE_SPHERE_PACKAGE_COMMAND_ARG}"
    DEPENDS ${AZURE_SPHERE_PACKAGE_DEPENDS}
    COMMAND_EXPAND_LISTS)

# JSchwert: Adding the PROJECT_NAME to the custom target name makes it unique to avoid CMake duplicate name errors
# JSchwert: Also added output to refer to the imagepackage location in the updated output directory
# Add MakeImage target
#ADD_CUSTOM_TARGET(MakeImage ALL
#    DEPENDS "${CMAKE_BINARY_DIR}/${PROJECT_NAME}.imagepackage")
#ADD_DEPENDENCIES(MakeImage ${PROJECT_NAME})

ADD_CUSTOM_TARGET(MakeImage_${PROJECT_NAME} ALL
    DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.imagepackage")
message("Project ${PROJECT_NAME} output will be located in ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.imagepackage" )
ADD_DEPENDENCIES(MakeImage_${PROJECT_NAME} ${PROJECT_NAME})
